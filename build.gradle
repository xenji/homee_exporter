buildscript {
    ext.kotlinVersion = "1.2.60"
    ext.kotlinArgParser = "2.0.7"
    ext.http4k = "3.35.0"
    ext.prometheus = "0.5.0"
    ext.loggingVersion = "1.5.9"
    ext.logback = "1.2.3"
    ext.javaWebsocket = "1.3.7"
    ext.gitVersionVersion = "0.11.0"
    ext.licensePluginVersion = "0.14.0"
    ext.gradleOSPackagePluginVersion = "4.8.0"
    ext.testLoggerVersion = "1.4.0"
    ext.shadowJarVersion = "2.0.4"
    ext.guavaVersion = "26.0-jre"
    ext.detektPluginVersion = "1.0.0.RC8"
    ext.bintrayPluginVersion = "1.8.0"
    ext.githubReleasePlugin = "2.0.1"
    repositories {
        jcenter()
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:$gitVersionVersion"
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:$licensePluginVersion"
        classpath "com.adarshr:gradle-test-logger-plugin:$testLoggerVersion"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadowJarVersion"
        classpath "com.netflix.nebula:gradle-ospackage-plugin:$gradleOSPackagePluginVersion"
        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektPluginVersion"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayPluginVersion"
        classpath "gradle.plugin.com.github.breadmoirai:github-release:$githubReleasePlugin"
    }
}

apply plugin: "kotlin"
apply plugin: "application"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.palantir.git-version"
apply plugin: "com.github.hierynomus.license"
apply plugin: "com.adarshr.test-logger"
apply plugin: "idea"
apply plugin: "nebula.ospackage"
apply plugin: "nebula.deb"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.github.breadmoirai.github-release"

mainClassName = "com.github.xenji.homee.ExporterKt"
group = "com.github.xenji"
version gitVersion()

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    compile "org.http4k:http4k-client-okhttp:${http4k}"
    compile "org.http4k:http4k-format-moshi:${http4k}"
    compile "org.java-websocket:Java-WebSocket:${javaWebsocket}"
    compile "io.prometheus:simpleclient_httpserver:${prometheus}"
    compile "com.xenomachina:kotlin-argparser:${kotlinArgParser}"
    compile "io.github.microutils:kotlin-logging:${loggingVersion}"
    compile "ch.qos.logback:logback-classic:${logback}"
    compile "com.google.guava:guava:${guavaVersion}"
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.8.1"
    distributionType = Wrapper.DistributionType.ALL
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

detekt {
    version = "1.0.0.RC8"
    profile("main") {
        input = "$projectDir/src/main/kotlin"
        config = "$projectDir/detekt.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
    }
}

jar {
    baseName = "homee_exporter"
    version = project.version
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Source-Compatibility": project.sourceCompatibility)
    }
}

shadowJar {
    manifest {
        inheritFrom project.tasks.jar.manifest
    }
    archiveName = 'homee_exporter.jar'
}


ospackage {
    packageName = 'homee-exporter'
    user = 'nobody'
    release = 1
    license = 'MIT'
    configurationFile('/etc/default/homee_exporter')
    configurationFile('/lib/systemd/system/homee_exporter.service')
    into '/opt/homee_exporter'

    from(shadowJar.outputs.files) {
        into 'lib'
    }

    from('src/main/etc/default/') {
        fileType CONFIG | NOREPLACE
        into '/etc/default/'
    }

    from('src/main/etc/systemd/system') {
        fileType CONFIG
        into '/lib/systemd/system/'
    }
}

buildDeb {
    requires('java8-runtime-headless')
}

buildDeb.dependsOn build

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    filesSpec {
        from buildDeb.getArchivePath()
        into '.'
    }

    pkg {
        repo = 'homee-exporter'
        name = 'homee-exporter'
        userOrg = 'xenji'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/xenji/homee_exporter.git'
        issueTrackerUrl = 'https://github.com/xenji/homee_exporter/issues'
        websiteUrl = 'https://github.com/xenji/homee_exporter'
        githubRepo = 'xenji/homee_exporter'
        debian {
            distribution = 'stable'
            component = 'main'
            architecture = 'noarch'
        }
        version {
            name = gitVersion()
            desc = 'homee prometheus exporter'
            released = new Date()
            vcsTag = gitVersion()
            gpg {
                sign = true
                passphrase = project.hasProperty('gpgPassphrase') ? project.property('gpgPassphrase') : System.getenv('GPG_PASSPHRASE')
            }
        }
    }
}

_bintrayRecordingCopy.dependsOn buildDeb

githubRelease {
    token = project.hasProperty('githubToken') ? project.property('githubToken') : System.getenv('GITHUB_TOKEN')
    owner = "xenji"
    repo = "homee_exporter"
    tagName = gitVersion()
    targetCommitish = "master"
    draft = true
    prerelease = versionDetails().isCleanTag
    def files = []
    files.addAll(buildDeb.outputs.files.filter { it.name.endsWith(".deb") })
    files.addAll(shadowDistTar.outputs.files)
    files.addAll(shadowDistZip.outputs.files)
    files.addAll(distZip.outputs.files)
    files.addAll(distTar.outputs.files)
    releaseAssets = files
}

tasks.findByName("githubRelease").dependsOn buildDeb


